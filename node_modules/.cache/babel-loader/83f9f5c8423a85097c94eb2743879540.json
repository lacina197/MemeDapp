{"ast":null,"code":"import _regeneratorRuntime from \"/home/lacin/Desktop/myIPFS/ProjectLacin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/lacin/Desktop/myIPFS/ProjectLacin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/lacin/Desktop/myIPFS/ProjectLacin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/home/lacin/Desktop/myIPFS/ProjectLacin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/lacin/Desktop/myIPFS/ProjectLacin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/home/lacin/Desktop/myIPFS/ProjectLacin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/lacin/Desktop/myIPFS/ProjectLacin/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/lacin/Desktop/myIPFS/ProjectLacin/src/components/App.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport './App.css';\nimport Meme from '../abis/Meme.json'; //import { create } from 'ipfs-http-client'\n//const ipfs = create({ host: 'localhost', port: '5001' })\n//const IPFS=require('ipfs-http-client');\n//const ipfs2 =IPFS({host:'ipfs.infura.io',port:5001,protocol:'https'});\n\nvar ipfsClient = require('ipfs-http-client');\n\nvar ipfs = ipfsClient({\n  host: 'ipfs.infura.io',\n  port: 5001,\n  protocol: 'https'\n});\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    value: function () {\n      var _componentWillMount = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }()\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n\n    _this.captureFile = function (event) {\n      event.preventDefault();\n      console.log('file captured!'); // process file for IPFS\n\n      var file = event.target.files[0];\n      var reader = new window.FileReader();\n      reader.readAsArrayBuffer(file);\n\n      reader.onloadend = function () {\n        _this.setState({\n          buffer: Buffer(reader.result)\n        });\n\n        console.log('Reader Buffer : ', _this.state.buffer);\n      };\n    };\n\n    _this.onSubmit = function (event) {\n      event.preventDefault();\n      console.log(\"Submitting file to ipfs...\");\n      ipfs.add(_this.state.buffer, function (error, result) {\n        console.log('Ipfs result', result);\n        var memeHash = result[0].hash;\n\n        if (error) {\n          console.error(error);\n          return;\n        } //this.state.contract.methods.set(result[0].hash).send({ from: this.state.account }).then((r) => {\n        //   return this.setState({ memeHash: result.hash })\n        //})\n\n\n        _this.state.contract.methods.set(memeHash).send({\n          from: _this.state.account\n        }).then(function (r) {\n          _this.setState({\n            memeHash: memeHash\n          });\n        });\n      });\n    };\n\n    _this.state = {\n      account: null,\n      buffer: null,\n      contract: null,\n      memeHash: ''\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                console.log(\"1-\" + window.web3);\n                _context2.next = 5;\n                return window.ethereum.enable();\n\n              case 5:\n                console.log(\"2-\");\n                _context2.next = 9;\n                break;\n\n              case 8:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                  console.log(\"3-\");\n                } else {\n                  window.alert('Non-Ethereum browser detected. You should consider trying MetaMask! Be aware of Developer AREA!!');\n                }\n\n              case 9:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }()\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee3() {\n        var web3, accounts, networkId, networkData, abi, address, contract, memeHash;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3; // Get the account\n\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                console.log(\"Account : \" + accounts);\n                this.setState({\n                  account: accounts[0]\n                }); // Get the network\n\n                _context3.next = 8;\n                return web3.eth.net.getId();\n\n              case 8:\n                networkId = _context3.sent;\n                console.log(\"Network id : \" + networkId); // Get SC (we need abi: \"Meme.abi\" and address: \"networkData.address\")\n\n                networkData = Meme.networks[networkId];\n\n                if (!networkData) {\n                  _context3.next = 24;\n                  break;\n                }\n\n                // fecth contract\n                abi = Meme.abi;\n                address = networkData.address;\n                contract = web3.eth.Contract(abi, address);\n                this.setState({\n                  contract: contract\n                });\n                console.log(contract); // Get meme hash\n\n                _context3.next = 19;\n                return contract.methods.get().call();\n\n              case 19:\n                memeHash = _context3.sent;\n                this.setState({\n                  memeHash: memeHash\n                });\n                console.log(\"current meme hash : \" + memeHash);\n                _context3.next = 25;\n                break;\n\n              case 24:\n                window.alert('SC not deloyed to detected network! ');\n\n              case 25:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }()\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(\"nav\", {\n        className: \"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        className: \"navbar-brand col-sm-3 col-md-2 mr-0\",\n        href: \"http://www.google.com\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, \"Hello Group Lacin\"), React.createElement(\"ul\", {\n        className: \"navbar-nav px-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(\"li\", {\n        className: \"nav-item text-nawrap d-none d-sm-none d-sm-block\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(\"small\", {\n        className: \"text-white\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147\n        },\n        __self: this\n      }, \" \", this.state.account, \" \")))), React.createElement(\"div\", {\n        className: \"container-fluid mt-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"row\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 d-flex text-center\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"content mr-auto ml-auto\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, React.createElement(\"a\", {\n        href: \"javascript:window.top.location.reload(true)\",\n        class: \"continue\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: \"https://ipfs.infura.io/ipfs/\".concat(this.state.memeHash),\n        alt: \"LacinDBImage\",\n        width: \"500\",\n        height: \"400\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      })), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, \"\\xA0\"), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, \"Change meme\"), React.createElement(\"form\", {\n        onSubmit: this.onSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 164\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"file\",\n        onChange: this.captureFile,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        type: \"submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      })))))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/lacin/Desktop/myIPFS/ProjectLacin/src/components/App.js"],"names":["React","Component","Web3","Meme","ipfsClient","require","ipfs","host","port","protocol","App","loadWeb3","loadBlockchainData","props","captureFile","event","preventDefault","console","log","file","target","files","reader","window","FileReader","readAsArrayBuffer","onloadend","setState","buffer","Buffer","result","state","onSubmit","add","error","memeHash","hash","contract","methods","set","send","from","account","then","r","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","accounts","net","getId","networkId","networkData","networks","abi","address","Contract","get","call"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport './App.css';\nimport Meme from '../abis/Meme.json'\n\n//import { create } from 'ipfs-http-client'\n//const ipfs = create({ host: 'localhost', port: '5001' })\n\n//const IPFS=require('ipfs-http-client');\n//const ipfs2 =IPFS({host:'ipfs.infura.io',port:5001,protocol:'https'});\n\nconst ipfsClient = require('ipfs-http-client')\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' })\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: null,\n      buffer: null,\n      contract: null,\n      memeHash: ''\n    };\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      console.log(\"1-\"+window.web3)\n      await window.ethereum.enable()\n      console.log(\"2-\")\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n      console.log(\"3-\")\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask! Be aware of Developer AREA!!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Get the account\n    const accounts = await web3.eth.getAccounts()\n    console.log(\"Account : \"+accounts)\n    this.setState({account: accounts[0] })\n    // Get the network\n    const networkId = await web3.eth.net.getId()\n    console.log(\"Network id : \"+networkId)\n    // Get SC (we need abi: \"Meme.abi\" and address: \"networkData.address\")\n    const networkData = Meme.networks[networkId]\n    if(networkData)\n    {\n      // fecth contract\n      const abi = Meme.abi\n      const address = networkData.address\n      const contract = web3.eth.Contract(abi,address)\n      this.setState({contract})\n      console.log(contract)\n      // Get meme hash\n      const memeHash = await contract.methods.get().call()\n      this.setState( {memeHash} )\n      console.log(\"current meme hash : \"+memeHash)\n    }\n    else \n    {\n      window.alert('SC not deloyed to detected network! ')\n    }\n  }\n\n  captureFile = (event) => {\n    event.preventDefault()\n    console.log('file captured!')\n    // process file for IPFS\n    const file = event.target.files[0]\n    const reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n    reader.onloadend = () => {\n      this.setState({ buffer: Buffer(reader.result) })\n      console.log('Reader Buffer : ', this.state.buffer)\n    }\n  }\n\n  // Example1 Hash = QmXfojCPuMEv94vRBEFVKgRhn4pd6EBbECHFFgnMMD68oB\n  // Example1 url = https://ipfs.infura.io/ipfs/QmXfojCPuMEv94vRBEFVKgRhn4pd6EBbECHFFgnMMD68oB\n  /*\n  onSubmit = (event) => {\n    event.preventDefault()\n    console.log(\"Submiting file to ipfs..\")\n  \n    ipfs.add(this.state.buffer, (error,result) => {\n      console.log('IPFS Result', result);\n      // const memeHash = result[0]\n      if(error) {\n        console.error(\"BUFFER STATE ERROR : \"+error)\n        return\n      }\n      this.setState({ memeHash: result[0].hash })\n      // 2. Store file in BC\n      this.state.contract.methods.set(result[0].hash).send({ from: this.state.account }).then((r) => {\n        return this.setState({ memeHash: result[0].hash \n      })\n    })\n  })\n}\n*/\n  onSubmit = (event) => {\n    event.preventDefault()\n    console.log(\"Submitting file to ipfs...\")\n    ipfs.add(this.state.buffer, (error, result) => {\n      console.log('Ipfs result', result)\n      const memeHash = result[0].hash\n      if(error) {\n        console.error(error)\n        return\n      }\n      //this.state.contract.methods.set(result[0].hash).send({ from: this.state.account }).then((r) => {\n      //   return this.setState({ memeHash: result.hash })\n      //})\n      this.state.contract.methods.set(memeHash).send({ from: this.state.account }).then((r) => {\n        this.setState({ memeHash })\n      })\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n          <a\n            className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n            href=\"http://www.google.com\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Hello Group Lacin\n          </a>\n          <ul className=\"navbar-nav px-3\">\n            <li className=\"nav-item text-nawrap d-none d-sm-none d-sm-block\">\n              <small className=\"text-white\"> {this.state.account} </small>\n            </li>\n          </ul>\n        </nav>\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\n              <div className=\"content mr-auto ml-auto\">\n                <a\n                  href=\"javascript:window.top.location.reload(true)\" class=\"continue\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  <img src={`https://ipfs.infura.io/ipfs/${this.state.memeHash}`} alt=\"LacinDBImage\" width=\"500\" height=\"400\" />\n                </a>\n                <p>&nbsp;</p>\n                <h2>Change meme</h2>\n                <form onSubmit={this.onSubmit}>\n                  <input type=\"file\" onChange={this.captureFile} />\n                  <input type=\"submit\"/>\n                </form>\n              </div>\n            </main>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}