{"version":3,"sources":["serviceWorker.js","index.js","components/App.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","ipfs","require","ipfsClient","host","port","protocol","props","_this","Object","_home_lacin_Desktop_MemeDapp_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__","this","_home_lacin_Desktop_MemeDapp_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","_home_lacin_Desktop_MemeDapp_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","call","captureFile","event","preventDefault","console","log","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","setState","buffer","Buffer","result","state","onSubmit","add","error","memeHash","hash","contract","methods","set","send","from","account","r","loadWeb3","loadBlockchainData","ethereum","web3","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","net","getId","networkId","networkData","Meme","networks","abi","address","Contract","get","_React$createElement","react__WEBPACK_IMPORTED_MODULE_8___default","className","rel","role","href","_home_lacin_Desktop_MemeDapp_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","src","concat","alt","width","height","type","onChange","Component"],"mappings":"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","file":"static/js/main.8c35017b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport './App.css';\nimport Meme from '../abis/Meme.json'\n\n//import { create } from 'ipfs-http-client'\n//const ipfs = create({ host: 'localhost', port: '5001' })\n\n//const IPFS=require('ipfs-http-client');\n//const ipfs2 =IPFS({host:'ipfs.infura.io',port:5001,protocol:'https'});\n\nconst ipfsClient = require('ipfs-http-client')\nconst ipfs = ipfsClient({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' })\n\nclass App extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      account: null,\n      buffer: null,\n      contract: null,\n      memeHash: ''\n    };\n  }\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      console.log(\"1-\"+window.web3)\n      await window.ethereum.enable()\n      console.log(\"2-\")\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n      console.log(\"3-\")\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask! Be aware of Developer AREA!!')\n    }\n  }\n\n  async loadBlockchainData() {\n    const web3 = window.web3\n    // Get the account\n    const accounts = await web3.eth.getAccounts()\n    console.log(\"Account : \"+accounts)\n    this.setState({account: accounts[0] })\n    // Get the network\n    const networkId = await web3.eth.net.getId()\n    console.log(\"Network id : \"+networkId)\n    // Get SC (we need abi: \"Meme.abi\" and address: \"networkData.address\")\n    const networkData = Meme.networks[networkId]\n    if(networkData)\n    {\n      // fecth contract\n      const abi = Meme.abi\n      const address = networkData.address\n      const contract = web3.eth.Contract(abi,address)\n      this.setState({contract})\n      console.log(contract)\n      // Get meme hash\n      const memeHash = await contract.methods.get().call()\n      this.setState( {memeHash} )\n      console.log(\"current meme hash : \"+memeHash)\n    }\n    else \n    {\n      window.alert('SC not deloyed to detected network! ')\n    }\n  }\n\n  captureFile = (event) => {\n    event.preventDefault()\n    console.log('file captured!')\n    // process file for IPFS\n    const file = event.target.files[0]\n    const reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n    reader.onloadend = () => {\n      this.setState({ buffer: Buffer(reader.result) })\n      console.log('Reader Buffer : ', this.state.buffer)\n    }\n  }\n\n  // Example1 Hash = QmXfojCPuMEv94vRBEFVKgRhn4pd6EBbECHFFgnMMD68oB\n  // Example1 url = https://ipfs.infura.io/ipfs/QmXfojCPuMEv94vRBEFVKgRhn4pd6EBbECHFFgnMMD68oB\n  /*\n  onSubmit = (event) => {\n    event.preventDefault()\n    console.log(\"Submiting file to ipfs..\")\n  \n    ipfs.add(this.state.buffer, (error,result) => {\n      console.log('IPFS Result', result);\n      // const memeHash = result[0]\n      if(error) {\n        console.error(\"BUFFER STATE ERROR : \"+error)\n        return\n      }\n      this.setState({ memeHash: result[0].hash })\n      // 2. Store file in BC\n      this.state.contract.methods.set(result[0].hash).send({ from: this.state.account }).then((r) => {\n        return this.setState({ memeHash: result[0].hash \n      })1\n    })\n  })\n}\n*/\n  onSubmit = (event) => {\n    event.preventDefault()\n    console.log(\"Submitting file to ipfs...\")\n    ipfs.add(this.state.buffer, (error, result) => {\n      console.log('Ipfs result', result)\n      const memeHash = result[0].hash\n      if(error) {\n        console.error(error)\n        return\n      }\n      //this.state.contract.methods.set(result[0].hash).send({ from: this.state.account }).then((r) => {\n      //   return this.setState({ memeHash: result.hash })\n      //})\n      this.state.contract.methods.set(memeHash).send({ from: this.state.account }).then((r) => {\n        this.setState({ memeHash })\n      })\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n          <a\n            className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Hello Lacin\n          </a>\n          <ul className=\"navbar-nav px-3\">\n            <li className=\"nav-item text-nawrap d-none d-sm-none d-sm-block\">\n              <small className=\"text-white\"> {this.state.account} </small>\n            </li>\n          </ul>\n        </nav>\n        <div className=\"container-fluid mt-5\">\n          <div className=\"row\">\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\n              <div className=\"content mr-auto ml-auto\">\n                <a\n                  href=\"javascript:window.top.location.reload(true)\" \n                  href=\"www.github.com\"\n                  class=\"continue\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  <img src={`https://ipfs.infura.io/ipfs/${this.state.memeHash}`} \n                  alt=\"LacinDBImage\" width=\"500\" height=\"400\" />\n                </a>\n                <p>&nbsp;</p>\n                <h2>Change Your Meme</h2>\n                <form onSubmit={this.onSubmit}>\n                  <input type=\"file\" onChange={this.captureFile} />\n                  <input type=\"submit\"/>\n                </form>\n              </div>\n            </main>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"sourceRoot":""}